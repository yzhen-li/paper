%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: activepoint-news-recall500-24b-qp5.pdf
%%Creator: Adobe Acrobat 9.4.6
%%For: zhenyi
%%CreationDate: 12/5/11, 9:59 PM
%%BoundingBox: 0 0 569 381
%%HiResBoundingBox: 0 0 569 381
%%CropBox: 0 0 569 381
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1081 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2011-12-05T21:58:29+08:00"
   xmp:ModifyDate="2011-12-05T21:58:29+08:00"
   xmp:CreatorTool="MATLAB, The Mathworks, Inc. Version 7.8.0.347 (R2009a). Operating System: Microsoft Windows Vista."
   pdf:Producer="Acrobat Distiller 9.4.6 (Macintosh)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:99169227-03c6-4a4c-ac96-93ea6ae2a9d1"
   xmpMM:InstanceID="uuid:164a6f26-aa79-6846-a761-e09271247676">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">D:\Users\yzhen\MyProjects\AH_KDD\AH\code\result\activepoint-news-recall500-24b-qp5.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [569 381 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -381 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 381 li
569 381 li
569 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 0 mo
569.04 0 li
569.04 380.5 li
0 380.5 li
cp
clp
569.25 0 mo
0 0 li
0 380.583 li
569.25 380.583 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
grestore
59.583 340.167 mo
560.5 340.167 li
560.5 9.33398 li
59.583 9.33398 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
59.583 340.167 mo
59.583 9.33401 li
560.5 9.33401 li
560.5 340.167 li
59.583 340.167 li
@
.667 lw
[.5 4 ] 0 dsh
59.583 340.167 mo
560.5 340.167 li
560.5 340.167 mo
560.5 340.167 li
59.583 285 mo
560.5 285 li
560.5 285 mo
560.5 285 li
59.583 229.833 mo
560.5 229.833 li
560.5 229.833 mo
560.5 229.833 li
59.583 174.75 mo
560.5 174.75 li
560.5 174.75 mo
560.5 174.75 li
59.583 119.583 mo
560.5 119.583 li
560.5 119.583 mo
560.5 119.583 li
59.583 64.417 mo
560.5 64.417 li
560.5 64.417 mo
560.5 64.417 li
59.583 9.33301 mo
560.5 9.33301 li
560.5 9.33301 mo
560.5 9.33301 li
1 /0 /CSD get_res sepcs
1 sep
@
1 lw
[] 0 dsh
59.583 9.33301 mo
560.5 9.33301 li
@
59.583 340.166 mo
560.5 340.166 li
560.5 9.33301 li
@
59.583 340.166 mo
59.583 9.33301 li
@
59.583 340.166 mo
560.5 340.166 li
@
59.583 340.166 mo
59.583 9.33301 li
@
89 340.166 mo
89 335.083 li
@
89 9.33301 mo
89 14.333 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /LWYAAA+Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3210481d3e000000cc000000606376
74208de93e9e0000012c0000036c6670676de80497d30000049800000a1d
676c796635063a890000595800001c24686561648c28161600000eb80000
0036686865610a220faa00000ef000000024686d747828ff1e3100000f14
000022486c6f636100eb80440000315c0000224c6d61787010fc0b2d0000
53a8000000206e616d6544e42b89000053c8000001be70726570bc836e31
00005588000003cf676469720000000000000000000000000003fc780190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d000000000100000000000017b25b43
5f0f3cf500110800000000005f4d8f0000000000c9c13cf7f865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000089205120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c014f004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d00240556009805560098042700980556002505560098
0804001404e3003b05c7009805c7009805560098052f002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06390042
0556002505c70098052f0060078d0098078d009806aa001d071d00ba0556
00b605c700640800009805cb006a047300560473004804730098031b0087
04e3004e04730050063d0017040000330473007f0473007f047300980498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404730087044e005c063900870639008704e3
001b05c70087040000870400001b06390087047700500556009804730050
04270098031b0087023900ba01c700870400002305c70050040000480239
001d01c7ffe30800002b06c3001b08000098069c008701c7ffdd05560062
0639004e0473001b0556009804730098040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000002390000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df0096048600520486007f072300140589
0017056d002404860043056d002404860043056d00750486005208d9001a
06dd0012054f0039040a003005df00960486007f05df00960486007f0655
00500486005205df006004120023056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800ba0600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc680000fc680000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090428005803b7006b
0497007104b0004f0797004a0418006a045a005505d5004c07a9004404bf
004b03e0003b0965004a03f900560419004e06ed004a0420003f04500050
06a3004a03f3004d0633006006b90047064000440419004b0667004503be
003e043d003d03d60052048400440412004a041600460497003903fa0058
0650002d03cd005e0560005604950032045e005503e9003e0462005406c2
0049044500f6000000000000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000a8000000a800000184
000001d0000002e800000440000004dc0000060400000730000007300000
089400000894000008940000089400000894000008940000089400000894
00000a4400000b5c00000c6400000c6400000c6400000c6400000c640000
0c6400000cd400000cd400000cd400000cd400000cd400000dec00000e98
00000e9800000e9800000e9800000fac00000fac00000fac00000fac0000
0fac00000fac00000fac00000fac00000fac00000fac00000fac00000fac
00000fac00000fac00000fac000011400000121400001318000013180000
14ac000015440000154400001544000015a0000015a0000015a0000015e4
000016dc000017940000188400001884000018840000191000001ad00000
1b7000001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400001c24
00001c2400001c2400001c2400001c2400001c2400001c2400001c240000
1c2400001c2400001c2400001c2400001c2400001c2400001c2400010000
089200920009006b0007000200100010005d000007e80a1d000400010000
000a007e0001000000000000005000000001000000000003001000500001
000000000004001000600001000000000006001000700001000000000007
003200800003000104090001002000b20003000104090002000e00d20003
000104090003002000e00003000104090004002001000003000104090006
00200120a920313939302d32303036204170706c6520436f6d7075746572
20496e632e20a92031393831204c696e6f7479706520414720a920313939
302d3931205479706520536f6c7574696f6e7320496e632e4a4e45464a4b
2b48656c7665746963614a4e45464a4b2b48656c7665746963614a4e4546
4a4b2b48656c76657469636148656c766574696361206973206120726567
697374657265642074726164656d61726b206f66204c696e6f7479706520
4147004a004e00450046004a004b002b00480065006c0076006500740069
006300610052006500670075006c00610072004a004e00450046004a004b
002b00480065006c007600650074006900630061004a004e00450046004a
004b002b00480065006c007600650074006900630061004a004e00450046
004a004b002b00480065006c0076006500740069006300610000b800532b
b800492bb8003f2bb800352bb8002b2b4118008001a6009001a600a001a6
00030069018b0079018b0089018b0099018b00040089018b0099018b00a9
018b00b9018bb2040840ba0179001a014a400b041f5414191f180a0b1fd2
b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a0019f0064
001f01a50025017a00480028019ab3296c1f60410a01a9007001a9008001
a90003008001a9000101a9b21e321fbe012c00250401001f0126001e0401
b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f1fc01d
9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c1f931e
b8019ab21f921db80101b21f911db80101b21f751db80201b61f6d29961f
6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f351de41f
2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801254011
1f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2254a1f
ba019b0025017ab349293896b8017bb348283125b8017a40364828962948
2725294c1f252946272729482756c80784075b07410732072b0728072607
21071b071408120810080e080c080a08080807b801acb23f1f06bb01ab00
3f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7080408
0208000814b8ffe0b40000010014b801abb41000000100b801abb6061000
00010006b801adb300000100b801ad401f04000001000410000001001002
000001000200000001000002010802004a00b0018db806008516763f183f
123e113946443e113946443e113946443e113946443e113946443e113946
60443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff
1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b376706a
66456523456023456560234560b08b766818b080622020b16a7045652345
20b003266062636820b003266165b070236544b06a234420b17666456523
4520b003266062636820b003266165b066236544b0762344b10066455458
b166406544b27640764523614459b36242725d4565234560234565602345
60b089766818b080622020b172424565234520b003266062636820b00326
6165b042236544b072234420b1625d4565234520b003266062636820b003
266165b05d236544b0622344b1005d455458b15d406544b2624062452361
44592b2b2b2b456953427374b8019a2045694b20b02853b049515a58b020
615944b801a620456944750000>
[7205 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> LWYAAA+Helvetica AddT42Char 
1 464 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>LWYAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd00030007003fb800532bb800082fb800092fb800
0810b80000d0b800002fb8000910b80003dcb80004dcb8000010b80007dc
00ba0007000000562bba0002000500562b3031331121112711211142048e
b8fce205bdfa43b8044dfbb30000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/space 3 def
/two 21 def
end
LWYAAA+Helvetica /Encoding get
dup 32 /space put
dup 50 /two put
pop
end
%ADOEndSubsetFont
/ERMWEC+Helvetica /LWYAAA+Helvetica findfont ct_VMDictPut/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 17{/.notdef}rp /two 205{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf82.3333 357.833 mo( 2)[4.448 0 ]xsh121.75 340.167 mo
121.75 335.084 li
@
121.75 9.33398 mo
121.75 14.334 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 1088 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/four 23 def
end
LWYAAA+Helvetica /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 17{/.notdef}rp /two /.notdef /four 203{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf115.083 357.833 mo( 4)[4.448 0 ]xsh154.5 340.167 mo
154.5 335.084 li
@
154.5 9.33398 mo
154.5 14.334 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 1540 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/six 25 def
end
LWYAAA+Helvetica /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 17{/.notdef}rp /two /.notdef /four /.notdef /six 201{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf147.833 357.833 mo( 6)[4.448 0 ]xsh187.25 340.167 mo
187.25 335.084 li
@
187.25 9.33398 mo
187.25 14.334 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 1840 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/eight 27 def
end
LWYAAA+Helvetica /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 17{/.notdef}rp /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf180.583 357.833 mo( 8)[4.448 0 ]xsh220 340.167 mo
220 335.084 li
@
220 9.33398 mo
220 14.334 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 168 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>LWYAAA+Helvetica AddT42Char 
1 388 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/zero 19 def
/one 20 def
end
LWYAAA+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf211.167 357.833 mo(10)[8.896 0 ]xsh252.667 340.167 mo
252.667 335.084 li
@
252.667 9.33398 mo
252.667 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf243.833 357.833 mo(12)[8.896 0 ]xsh285.417 340.167 mo
285.417 335.084 li
@
285.417 9.33398 mo
285.417 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf276.583 357.833 mo(14)[8.896 0 ]xsh318.167 340.167 mo
318.167 335.084 li
@
318.167 9.33398 mo
318.167 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf309.333 357.833 mo(16)[8.896 0 ]xsh350.917 340.167 mo
350.917 335.084 li
@
350.917 9.33398 mo
350.917 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf342.083 357.833 mo(18)[8.896 0 ]xsh383.667 340.167 mo
383.667 335.084 li
@
383.667 9.33398 mo
383.667 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf374.833 357.833 mo(20)[8.896 0 ]xsh416.417 340.167 mo
416.417 335.084 li
@
416.417 9.33398 mo
416.417 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf407.583 357.833 mo(22)[8.896 0 ]xsh449.167 340.167 mo
449.167 335.084 li
@
449.167 9.33398 mo
449.167 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf440.333 357.833 mo(24)[8.896 0 ]xsh481.917 340.167 mo
481.917 335.084 li
@
481.917 9.33398 mo
481.917 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf473.083 357.833 mo(26)[8.896 0 ]xsh514.583 340.167 mo
514.583 335.084 li
@
514.583 9.33398 mo
514.583 14.334 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf505.75 357.833 mo(28)[8.896 0 ]xsh547.333 340.167 mo
547.333 335.084 li
@
547.333 9.33398 mo
547.333 14.334 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 744 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/three 22 def
end
LWYAAA+Helvetica /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /.notdef /six /.notdef /eight 199{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf538.5 357.833 mo(30)[8.896 0 ]xsh59.583 340.167 mo
64.583 340.167 li
@
560.5 340.167 mo
555.417 340.167 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 104 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/period 17 def
end
LWYAAA+Helvetica /Encoding get
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight 199{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf25.5833 346.083 mo(0.18)[8.89599 4.448 8.896 0 ]xsh59.583 285 mo
64.583 285 li
@
560.5 285 mo
555.417 285 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf34.5 290.917 mo(0.2)[8.896 4.448 0 ]xsh59.583 229.833 mo
64.583 229.833 li
@
560.5 229.833 mo
555.417 229.833 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf25.5833 235.75 mo(0.22)[8.89599 4.448 8.896 0 ]xsh59.583 174.75 mo
64.583 174.75 li
@
560.5 174.75 mo
555.417 174.75 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf25.5833 180.667 mo(0.24)[8.89599 4.448 8.896 0 ]xsh59.583 119.583 mo
64.583 119.583 li
@
560.5 119.583 mo
555.417 119.583 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf25.5833 125.5 mo(0.26)[8.89599 4.448 8.896 0 ]xsh59.583 64.417 mo
64.583 64.417 li
@
560.5 64.417 mo
555.417 64.417 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf25.5833 70.3333 mo(0.28)[8.89599 4.448 8.896 0 ]xsh59.583 9.33301 mo
64.583 9.33301 li
@
560.5 9.33301 mo
555.417 9.33301 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf34.5 15.25 mo(0.3)[8.896 4.448 0 ]xsh59.583 9.33301 mo
560.5 9.33301 li
@
59.583 340.166 mo
560.5 340.166 li
560.5 9.33301 li
@
59.583 340.166 mo
59.583 9.33301 li
@
2 lw
72.667 324.917 mo
72.667 326.75 li
@
67.917 324.917 mo
77.417 324.917 li
@
67.917 326.75 mo
77.417 326.75 li
@
89 322.917 mo
89 326.584 li
@
84.25 322.917 mo
93.75 322.917 li
@
84.25 326.584 mo
93.75 326.584 li
@
105.417 321.001 mo
105.417 326.334 li
@
100.667 321.001 mo
110.084 321.001 li
@
100.667 326.334 mo
110.084 326.334 li
@
121.75 314.667 mo
121.75 324.084 li
@
117 314.667 mo
126.5 314.667 li
@
117 324.084 mo
126.5 324.084 li
@
138.083 301.334 mo
138.083 311.251 li
@
133.333 301.334 mo
142.833 301.334 li
@
133.333 311.251 mo
142.833 311.251 li
@
154.5 294.251 mo
154.5 306.668 li
@
149.75 294.251 mo
159.25 294.251 li
@
149.75 306.668 mo
159.25 306.668 li
@
170.833 283.418 mo
170.833 296.585 li
@
166.083 283.418 mo
175.583 283.418 li
@
166.083 296.585 mo
175.583 296.585 li
@
187.25 269.835 mo
187.25 287.168 li
@
182.5 269.835 mo
192 269.835 li
@
182.5 287.168 mo
192 287.168 li
@
203.583 267.001 mo
203.583 274.834 li
@
198.833 267.001 mo
208.333 267.001 li
@
198.833 274.834 mo
208.333 274.834 li
@
220 273.584 mo
220 283.334 li
@
215.25 273.584 mo
224.75 273.584 li
@
215.25 283.334 mo
224.75 283.334 li
@
236.333 261.084 mo
236.333 272.334 li
@
231.583 261.084 mo
241.083 261.084 li
@
231.583 272.334 mo
241.083 272.334 li
@
252.666 253.917 mo
252.666 271.834 li
@
247.999 253.917 mo
257.416 253.917 li
@
247.999 271.834 mo
257.416 271.834 li
@
269.082 240.751 mo
269.082 256.084 li
@
264.332 240.751 mo
273.832 240.751 li
@
264.332 256.084 mo
273.832 256.084 li
@
285.415 216.167 mo
285.415 238.75 li
@
280.665 216.167 mo
290.165 216.167 li
@
280.665 238.75 mo
290.165 238.75 li
@
301.832 211.333 mo
301.832 231.666 li
@
297.082 211.333 mo
306.582 211.333 li
@
297.082 231.666 mo
306.582 231.666 li
@
318.165 196.749 mo
318.165 219.666 li
@
313.415 196.749 mo
322.915 196.749 li
@
313.415 219.666 mo
322.915 219.666 li
@
334.582 182.666 mo
334.582 204.666 li
@
329.832 182.666 mo
339.332 182.666 li
@
329.832 204.666 mo
339.332 204.666 li
@
350.915 163.749 mo
350.915 189.999 li
@
346.165 163.749 mo
355.665 163.749 li
@
346.165 189.999 mo
355.665 189.999 li
@
367.332 156.749 mo
367.332 179.749 li
@
362.582 156.749 mo
371.999 156.749 li
@
362.582 179.749 mo
371.999 179.749 li
@
383.665 154.749 mo
383.665 178.082 li
@
378.915 154.749 mo
388.415 154.749 li
@
378.915 178.082 mo
388.415 178.082 li
@
399.998 155.582 mo
399.998 180.915 li
@
395.248 155.582 mo
404.748 155.582 li
@
395.248 180.915 mo
404.748 180.915 li
@
416.415 143.832 mo
416.415 178.582 li
@
411.665 143.832 mo
421.165 143.832 li
@
411.665 178.582 mo
421.165 178.582 li
@
432.748 146.415 mo
432.748 173.082 li
@
427.998 146.415 mo
437.498 146.415 li
@
427.998 173.082 mo
437.498 173.082 li
@
449.165 138.832 mo
449.165 169.415 li
@
444.415 138.832 mo
453.915 138.832 li
@
444.415 169.415 mo
453.915 169.415 li
@
465.498 133.332 mo
465.498 163.165 li
@
460.748 133.332 mo
470.248 133.332 li
@
460.748 163.165 mo
470.248 163.165 li
@
481.915 138.748 mo
481.915 159.831 li
@
477.165 138.748 mo
486.665 138.748 li
@
477.165 159.831 mo
486.665 159.831 li
@
498.248 138.581 mo
498.248 158.998 li
@
493.498 138.581 mo
502.998 138.581 li
@
493.498 158.998 mo
502.998 158.998 li
@
514.581 123.665 mo
514.581 151.832 li
@
509.914 123.665 mo
519.331 123.665 li
@
509.914 151.832 mo
519.331 151.832 li
@
530.997 92.499 mo
530.997 113.749 li
@
526.247 92.499 mo
535.747 92.499 li
@
526.247 113.749 mo
535.747 113.749 li
@
547.33 79.332 mo
547.33 110.332 li
@
542.58 79.332 mo
552.08 79.332 li
@
542.58 110.332 mo
552.08 110.332 li
@
72.6631 325.832 mo
105.413 323.665 li
121.746 319.415 li
138.08 306.332 li
154.496 300.499 li
170.83 289.999 li
187.246 278.499 li
203.58 270.915 li
219.996 278.499 li
236.33 266.665 li
252.663 262.915 li
269.08 248.415 li
285.413 227.415 li
301.83 221.499 li
318.163 208.249 li
334.58 193.665 li
350.913 176.832 li
367.33 168.249 li
383.663 166.415 li
399.996 168.249 li
416.413 161.165 li
432.746 159.749 li
449.163 154.082 li
465.496 148.249 li
481.913 149.249 li
498.246 148.832 li
514.58 137.749 li
530.996 103.165 li
547.33 94.832 li
@
72.6631 324.915 mo
72.6631 326.748 li
@
67.9131 324.915 mo
77.4131 324.915 li
@
67.9131 326.748 mo
77.4131 326.748 li
@
88.9961 323.081 mo
88.9961 326.748 li
@
84.2461 323.081 mo
93.7461 323.081 li
@
84.2461 326.748 mo
93.7461 326.748 li
@
105.413 320.915 mo
105.413 326.748 li
@
100.663 320.915 mo
110.08 320.915 li
@
100.663 326.748 mo
110.08 326.748 li
@
121.746 313.665 mo
121.746 324.248 li
@
116.996 313.665 mo
126.496 313.665 li
@
116.996 324.248 mo
126.496 324.248 li
@
138.079 300.665 mo
138.079 310.082 li
@
133.329 300.665 mo
142.829 300.665 li
@
133.329 310.082 mo
142.829 310.082 li
@
154.496 293.082 mo
154.496 303.499 li
@
149.746 293.082 mo
159.246 293.082 li
@
149.746 303.499 mo
159.246 303.499 li
@
170.829 284.416 mo
170.829 296.916 li
@
166.079 284.416 mo
175.579 284.416 li
@
166.079 296.916 mo
175.579 296.916 li
@
187.246 269.416 mo
187.246 287.083 li
@
182.496 269.416 mo
191.996 269.416 li
@
182.496 287.083 mo
191.996 287.083 li
@
203.579 267.75 mo
203.579 280.667 li
@
198.829 267.75 mo
208.329 267.75 li
@
198.829 280.667 mo
208.329 280.667 li
@
219.996 272.584 mo
219.996 281.001 li
@
215.246 272.584 mo
224.746 272.584 li
@
215.246 281.001 mo
224.746 281.001 li
@
236.329 264.334 mo
236.329 274.917 li
@
231.579 264.334 mo
241.079 264.334 li
@
231.579 274.917 mo
241.079 274.917 li
@
252.662 254.667 mo
252.662 269.584 li
@
247.995 254.667 mo
257.412 254.667 li
@
247.995 269.584 mo
257.412 269.584 li
@
269.078 234.751 mo
269.078 253.918 li
@
264.328 234.751 mo
273.828 234.751 li
@
264.328 253.918 mo
273.828 253.918 li
@
285.411 218.001 mo
285.411 240.251 li
@
280.661 218.001 mo
290.161 218.001 li
@
280.661 240.251 mo
290.161 240.251 li
@
301.828 209.668 mo
301.828 231.168 li
@
297.078 209.668 mo
306.578 209.668 li
@
297.078 231.168 mo
306.578 231.168 li
@
318.161 201.501 mo
318.161 226.084 li
@
313.411 201.501 mo
322.911 201.501 li
@
313.411 226.084 mo
322.911 226.084 li
@
334.578 181.501 mo
334.578 204.418 li
@
329.828 181.501 mo
339.328 181.501 li
@
329.828 204.418 mo
339.328 204.418 li
@
350.911 166.418 mo
350.911 182.085 li
@
346.161 166.418 mo
355.661 166.418 li
@
346.161 182.085 mo
355.661 182.085 li
@
367.328 152.252 mo
367.328 181.585 li
@
362.578 152.252 mo
371.995 152.252 li
@
362.578 181.585 mo
371.995 181.585 li
@
383.661 149.835 mo
383.661 178.502 li
@
378.911 149.835 mo
388.411 149.835 li
@
378.911 178.502 mo
388.411 178.502 li
@
399.994 143.585 mo
399.994 177.502 li
@
395.244 143.585 mo
404.744 143.585 li
@
395.244 177.502 mo
404.744 177.502 li
@
416.411 145.252 mo
416.411 183.002 li
@
411.661 145.252 mo
421.161 145.252 li
@
411.661 183.002 mo
421.161 183.002 li
@
432.744 151.002 mo
432.744 173.252 li
@
427.994 151.002 mo
437.494 151.002 li
@
427.994 173.252 mo
437.494 173.252 li
@
449.161 155.669 mo
449.161 171.086 li
@
444.411 155.669 mo
453.911 155.669 li
@
444.411 171.086 mo
453.911 171.086 li
@
465.494 150.253 mo
465.494 165.92 li
@
460.744 150.253 mo
470.244 150.253 li
@
460.744 165.92 mo
470.244 165.92 li
@
481.911 136.67 mo
481.911 164.087 li
@
477.161 136.67 mo
486.661 136.67 li
@
477.161 164.087 mo
486.661 164.087 li
@
498.244 131.837 mo
498.244 165.087 li
@
493.494 131.837 mo
502.994 131.837 li
@
493.494 165.087 mo
502.994 165.087 li
@
514.577 114.087 mo
514.577 149.004 li
@
509.91 114.087 mo
519.327 114.087 li
@
509.91 149.004 mo
519.327 149.004 li
@
530.993 89.921 mo
530.993 117.171 li
@
526.243 89.921 mo
535.743 89.921 li
@
526.243 117.171 mo
535.743 117.171 li
@
547.326 77.088 mo
547.326 101.005 li
@
542.576 77.088 mo
552.076 77.088 li
@
542.576 101.005 mo
552.076 101.005 li
@
72.6592 325.838 mo
88.9922 324.921 li
105.409 323.838 li
121.742 318.921 li
138.076 305.338 li
154.492 298.338 li
170.826 290.671 li
187.242 278.255 li
203.576 274.171 li
219.992 276.755 li
236.326 269.588 li
252.659 262.088 li
269.076 244.338 li
285.409 229.088 li
301.826 220.421 li
318.159 213.755 li
334.576 192.921 li
350.909 174.255 li
367.326 166.921 li
383.659 164.171 li
399.992 160.505 li
416.409 164.088 li
432.742 162.171 li
449.159 163.338 li
465.492 158.088 li
481.909 150.421 li
498.242 148.505 li
514.576 131.588 li
530.992 103.588 li
547.326 89.0049 li
@
77.6522 325.805 mo
77.6522 328.565 75.4122 330.805 72.6522 330.805 cv
69.8922 330.805 67.6522 328.565 67.6522 325.805 cv
67.6522 323.045 69.8922 320.805 72.6522 320.805 cv
75.4122 320.805 77.6522 323.045 77.6522 325.805 cv
@
94.0322 324.905 mo
94.0322 327.665 91.7922 329.905 89.0322 329.905 cv
86.2722 329.905 84.0322 327.665 84.0322 324.905 cv
84.0322 322.145 86.2722 319.905 89.0322 319.905 cv
91.7922 319.905 94.0322 322.145 94.0322 324.905 cv
@
110.412 323.825 mo
110.412 326.585 108.172 328.825 105.412 328.825 cv
102.652 328.825 100.412 326.585 100.412 323.825 cv
100.412 321.065 102.652 318.825 105.412 318.825 cv
108.172 318.825 110.412 321.065 110.412 323.825 cv
@
126.732 318.905 mo
126.732 321.665 124.492 323.905 121.732 323.905 cv
118.972 323.905 116.732 321.665 116.732 318.905 cv
116.732 316.145 118.972 313.905 121.732 313.905 cv
124.492 313.905 126.732 316.145 126.732 318.905 cv
@
143.112 305.345 mo
143.112 308.105 140.872 310.345 138.112 310.345 cv
135.352 310.345 133.112 308.105 133.112 305.345 cv
133.112 302.585 135.352 300.345 138.112 300.345 cv
140.872 300.345 143.112 302.585 143.112 305.345 cv
@
159.492 298.325 mo
159.492 301.085 157.252 303.325 154.492 303.325 cv
151.732 303.325 149.492 301.085 149.492 298.325 cv
149.492 295.565 151.732 293.325 154.492 293.325 cv
157.252 293.325 159.492 295.565 159.492 298.325 cv
@
175.812 290.645 mo
175.812 293.405 173.572 295.645 170.812 295.645 cv
168.052 295.645 165.812 293.405 165.812 290.645 cv
165.812 287.885 168.052 285.645 170.812 285.645 cv
173.572 285.645 175.812 287.885 175.812 290.645 cv
@
192.252 278.285 mo
192.252 281.045 190.012 283.285 187.252 283.285 cv
184.492 283.285 182.252 281.045 182.252 278.285 cv
182.252 275.525 184.492 273.285 187.252 273.285 cv
190.012 273.285 192.252 275.525 192.252 278.285 cv
@
208.572 274.205 mo
208.572 276.965 206.332 279.205 203.572 279.205 cv
200.812 279.205 198.572 276.965 198.572 274.205 cv
198.572 271.445 200.812 269.205 203.572 269.205 cv
206.332 269.205 208.572 271.445 208.572 274.205 cv
@
224.952 276.725 mo
224.952 279.485 222.712 281.725 219.952 281.725 cv
217.192 281.725 214.952 279.485 214.952 276.725 cv
214.952 273.965 217.192 271.725 219.952 271.725 cv
222.712 271.725 224.952 273.965 224.952 276.725 cv
@
241.332 269.585 mo
241.332 272.345 239.092 274.585 236.332 274.585 cv
233.572 274.585 231.332 272.345 231.332 269.585 cv
231.332 266.825 233.572 264.585 236.332 264.585 cv
239.092 264.585 241.332 266.825 241.332 269.585 cv
@
257.652 262.085 mo
257.652 264.845 255.412 267.085 252.652 267.085 cv
249.892 267.085 247.652 264.845 247.652 262.085 cv
247.652 259.325 249.892 257.085 252.652 257.085 cv
255.412 257.085 257.652 259.325 257.652 262.085 cv
@
274.092 244.325 mo
274.092 247.085 271.852 249.325 269.092 249.325 cv
266.332 249.325 264.092 247.085 264.092 244.325 cv
264.092 241.565 266.332 239.325 269.092 239.325 cv
271.852 239.325 274.092 241.565 274.092 244.325 cv
@
290.412 229.085 mo
290.412 231.845 288.172 234.085 285.412 234.085 cv
282.652 234.085 280.412 231.845 280.412 229.085 cv
280.412 226.325 282.652 224.085 285.412 224.085 cv
288.172 224.085 290.412 226.325 290.412 229.085 cv
@
306.792 220.445 mo
306.792 223.205 304.552 225.445 301.792 225.445 cv
299.032 225.445 296.792 223.205 296.792 220.445 cv
296.792 217.685 299.032 215.445 301.792 215.445 cv
304.552 215.445 306.792 217.685 306.792 220.445 cv
@
323.172 213.725 mo
323.172 216.485 320.932 218.725 318.172 218.725 cv
315.412 218.725 313.172 216.485 313.172 213.725 cv
313.172 210.965 315.412 208.725 318.172 208.725 cv
320.932 208.725 323.172 210.965 323.172 213.725 cv
@
339.552 192.905 mo
339.552 195.665 337.312 197.905 334.552 197.905 cv
331.792 197.905 329.552 195.665 329.552 192.905 cv
329.552 190.145 331.792 187.905 334.552 187.905 cv
337.312 187.905 339.552 190.145 339.552 192.905 cv
@
355.872 174.245 mo
355.872 177.005 353.632 179.245 350.872 179.245 cv
348.112 179.245 345.872 177.005 345.872 174.245 cv
345.872 171.485 348.112 169.245 350.872 169.245 cv
353.632 169.245 355.872 171.485 355.872 174.245 cv
@
372.32 166.92 mo
372.32 169.68 370.08 171.92 367.32 171.92 cv
364.56 171.92 362.32 169.68 362.32 166.92 cv
362.32 164.16 364.56 161.92 367.32 161.92 cv
370.08 161.92 372.32 164.16 372.32 166.92 cv
@
388.64 164.16 mo
388.64 166.92 386.4 169.16 383.64 169.16 cv
380.88 169.16 378.64 166.92 378.64 164.16 cv
378.64 161.4 380.88 159.16 383.64 159.16 cv
386.4 159.16 388.64 161.4 388.64 164.16 cv
@
404.96 160.5 mo
404.96 163.26 402.72 165.5 399.96 165.5 cv
397.2 165.5 394.96 163.26 394.96 160.5 cv
394.96 157.74 397.2 155.5 399.96 155.5 cv
402.72 155.5 404.96 157.74 404.96 160.5 cv
@
421.4 164.1 mo
421.4 166.86 419.16 169.1 416.4 169.1 cv
413.64 169.1 411.4 166.86 411.4 164.1 cv
411.4 161.34 413.64 159.1 416.4 159.1 cv
419.16 159.1 421.4 161.34 421.4 164.1 cv
@
437.72 162.18 mo
437.72 164.94 435.48 167.18 432.72 167.18 cv
429.96 167.18 427.72 164.94 427.72 162.18 cv
427.72 159.42 429.96 157.18 432.72 157.18 cv
435.48 157.18 437.72 159.42 437.72 162.18 cv
@
454.16 163.32 mo
454.16 166.08 451.92 168.32 449.16 168.32 cv
446.4 168.32 444.16 166.08 444.16 163.32 cv
444.16 160.56 446.4 158.32 449.16 158.32 cv
451.92 158.32 454.16 160.56 454.16 163.32 cv
@
470.48 158.1 mo
470.48 160.86 468.24 163.1 465.48 163.1 cv
462.72 163.1 460.48 160.86 460.48 158.1 cv
460.48 155.34 462.72 153.1 465.48 153.1 cv
468.24 153.1 470.48 155.34 470.48 158.1 cv
@
486.92 150.42 mo
486.92 153.18 484.68 155.42 481.92 155.42 cv
479.16 155.42 476.92 153.18 476.92 150.42 cv
476.92 147.66 479.16 145.42 481.92 145.42 cv
484.68 145.42 486.92 147.66 486.92 150.42 cv
@
503.24 148.5 mo
503.24 151.26 501 153.5 498.24 153.5 cv
495.48 153.5 493.24 151.26 493.24 148.5 cv
493.24 145.74 495.48 143.5 498.24 143.5 cv
501 143.5 503.24 145.74 503.24 148.5 cv
@
519.56 131.58 mo
519.56 134.34 517.32 136.58 514.56 136.58 cv
511.8 136.58 509.56 134.34 509.56 131.58 cv
509.56 128.82 511.8 126.58 514.56 126.58 cv
517.32 126.58 519.56 128.82 519.56 131.58 cv
@
536 103.56 mo
536 106.32 533.76 108.56 531 108.56 cv
528.24 108.56 526 106.32 526 103.56 cv
526 100.8 528.24 98.56 531 98.56 cv
533.76 98.56 536 100.8 536 103.56 cv
@
552.32 89.04 mo
552.32 91.8 550.08 94.04 547.32 94.04 cv
544.56 94.04 542.32 91.8 542.32 89.04 cv
542.32 86.2801 544.56 84.04 547.32 84.04 cv
550.08 84.04 552.32 86.2801 552.32 89.04 cv
@
72.6671 324.917 mo
72.6671 326.75 li
@
67.9171 324.917 mo
77.4171 324.917 li
@
67.9171 326.75 mo
77.4171 326.75 li
@
89.0001 322.917 mo
89.0001 326.667 li
@
84.2501 322.917 mo
93.7501 322.917 li
@
84.2501 326.667 mo
93.7501 326.667 li
@
105.417 320.334 mo
105.417 326.667 li
@
100.667 320.334 mo
110.084 320.334 li
@
100.667 326.667 mo
110.084 326.667 li
@
121.75 312.25 mo
121.75 323.917 li
@
117 312.25 mo
126.5 312.25 li
@
117 323.917 mo
126.5 323.917 li
@
138.083 300.667 mo
138.083 311.167 li
@
133.333 300.667 mo
142.833 300.667 li
@
133.333 311.167 mo
142.833 311.167 li
@
154.5 292.667 mo
154.5 305.084 li
@
149.75 292.667 mo
159.25 292.667 li
@
149.75 305.084 mo
159.25 305.084 li
@
170.833 285.751 mo
170.833 299.084 li
@
166.083 285.751 mo
175.583 285.751 li
@
166.083 299.084 mo
175.583 299.084 li
@
187.25 269.251 mo
187.25 287.001 li
@
182.5 269.251 mo
192 269.251 li
@
182.5 287.001 mo
192 287.001 li
@
203.583 270.168 mo
203.583 282.335 li
@
198.833 270.168 mo
208.333 270.168 li
@
198.833 282.335 mo
208.333 282.335 li
@
220 271.168 mo
220 282.585 li
@
215.25 271.168 mo
224.75 271.168 li
@
215.25 282.585 mo
224.75 282.585 li
@
236.333 265.752 mo
236.333 275.669 li
@
231.583 265.752 mo
241.083 265.752 li
@
231.583 275.669 mo
241.083 275.669 li
@
252.666 255.919 mo
252.666 274.002 li
@
247.999 255.919 mo
257.416 255.919 li
@
247.999 274.002 mo
257.416 274.002 li
@
269.082 239.669 mo
269.082 249.586 li
@
264.332 239.669 mo
273.832 239.669 li
@
264.332 249.586 mo
273.832 249.586 li
@
285.415 222.419 mo
285.415 236.002 li
@
280.665 222.419 mo
290.165 222.419 li
@
280.665 236.002 mo
290.165 236.002 li
@
301.832 214.002 mo
301.832 227.835 li
@
297.082 214.002 mo
306.582 214.002 li
@
297.082 227.835 mo
306.582 227.835 li
@
318.165 201.168 mo
318.165 225.251 li
@
313.415 201.168 mo
322.915 201.168 li
@
313.415 225.251 mo
322.915 225.251 li
@
334.582 186.751 mo
334.582 205.834 li
@
329.832 186.751 mo
339.332 186.751 li
@
329.832 205.834 mo
339.332 205.834 li
@
350.915 165.417 mo
350.915 186.25 li
@
346.165 165.417 mo
355.665 165.417 li
@
346.165 186.25 mo
355.665 186.25 li
@
367.332 152.5 mo
367.332 181.583 li
@
362.582 152.5 mo
371.999 152.5 li
@
362.582 181.583 mo
371.999 181.583 li
@
383.665 151.833 mo
383.665 179.5 li
@
378.915 151.833 mo
388.415 151.833 li
@
378.915 179.5 mo
388.415 179.5 li
@
399.998 144.417 mo
399.998 183.667 li
@
395.248 144.417 mo
404.748 144.417 li
@
395.248 183.667 mo
404.748 183.667 li
@
416.415 145.667 mo
416.415 172.417 li
@
411.665 145.667 mo
421.165 145.667 li
@
411.665 172.417 mo
421.165 172.417 li
@
432.748 161.167 mo
432.748 183.75 li
@
427.998 161.167 mo
437.498 161.167 li
@
427.998 183.75 mo
437.498 183.75 li
@
449.165 151.833 mo
449.165 176.083 li
@
444.415 151.833 mo
453.915 151.833 li
@
444.415 176.083 mo
453.915 176.083 li
@
465.498 143.25 mo
465.498 166.583 li
@
460.748 143.25 mo
470.248 143.25 li
@
460.748 166.583 mo
470.248 166.583 li
@
481.915 138.666 mo
481.915 166.083 li
@
477.165 138.666 mo
486.665 138.666 li
@
477.165 166.083 mo
486.665 166.083 li
@
498.248 135.25 mo
498.248 165.167 li
@
493.498 135.25 mo
502.998 135.25 li
@
493.498 165.167 mo
502.998 165.167 li
@
514.581 115.417 mo
514.581 140.75 li
@
509.914 115.417 mo
519.331 115.417 li
@
509.914 140.75 mo
519.331 140.75 li
@
530.997 86.2501 mo
530.997 120.333 li
@
526.247 86.2501 mo
535.747 86.2501 li
@
526.247 120.333 mo
535.747 120.333 li
@
547.33 72.3331 mo
547.33 100.583 li
@
542.58 72.3331 mo
552.08 72.3331 li
@
542.58 100.583 mo
552.08 100.583 li
@
72.6631 325.833 mo
88.9961 324.75 li
105.413 323.5 li
121.746 318.083 li
138.08 305.916 li
154.496 298.833 li
170.83 292.416 li
187.246 278.083 li
203.58 276.25 li
219.996 276.833 li
236.33 270.666 li
252.663 265 li
269.08 244.666 li
285.413 229.166 li
301.83 220.916 li
318.163 213.25 li
334.58 196.333 li
350.913 175.833 li
367.33 167.083 li
383.663 165.666 li
399.996 164 li
416.413 159 li
432.746 172.416 li
449.163 164 li
465.496 154.916 li
481.913 152.416 li
498.246 150.25 li
514.58 128.083 li
530.996 103.333 li
547.33 86.4161 li
@
67.6631 325.833 mo
77.6631 325.833 li
@
72.6631 320.833 mo
72.6631 330.833 li
@
83.9961 324.75 mo
93.9961 324.75 li
@
88.9961 319.75 mo
88.9961 329.75 li
@
100.413 323.5 mo
110.413 323.5 li
@
105.413 318.5 mo
105.413 328.5 li
@
116.746 318.083 mo
126.746 318.083 li
@
121.746 313.083 mo
121.746 323.083 li
@
133.079 305.916 mo
143.079 305.916 li
@
138.079 300.916 mo
138.079 310.916 li
@
149.496 298.833 mo
159.496 298.833 li
@
154.496 293.833 mo
154.496 303.833 li
@
165.829 292.416 mo
175.829 292.416 li
@
170.829 287.416 mo
170.829 297.416 li
@
182.246 278.083 mo
192.246 278.083 li
@
187.246 273.083 mo
187.246 283.083 li
@
198.579 276.25 mo
208.579 276.25 li
@
203.579 271.25 mo
203.579 281.25 li
@
214.996 276.833 mo
224.996 276.833 li
@
219.996 271.833 mo
219.996 281.833 li
@
231.329 270.666 mo
241.329 270.666 li
@
236.329 265.666 mo
236.329 275.666 li
@
247.662 264.999 mo
257.662 264.999 li
@
252.662 259.999 mo
252.662 269.999 li
@
264.079 244.666 mo
274.079 244.666 li
@
269.079 239.666 mo
269.079 249.666 li
@
280.412 229.166 mo
290.412 229.166 li
@
285.412 224.166 mo
285.412 234.166 li
@
296.829 220.916 mo
306.829 220.916 li
@
301.829 215.916 mo
301.829 225.916 li
@
313.162 213.249 mo
323.162 213.249 li
@
318.162 208.249 mo
318.162 218.249 li
@
329.579 196.332 mo
339.579 196.332 li
@
334.579 191.332 mo
334.579 201.332 li
@
345.912 175.832 mo
355.912 175.832 li
@
350.912 170.832 mo
350.912 180.832 li
@
362.329 167.082 mo
372.329 167.082 li
@
367.329 162.082 mo
367.329 172.082 li
@
378.662 165.665 mo
388.662 165.665 li
@
383.662 160.665 mo
383.662 170.665 li
@
394.995 163.998 mo
404.995 163.998 li
@
399.995 158.998 mo
399.995 168.998 li
@
411.412 158.998 mo
421.412 158.998 li
@
416.412 153.998 mo
416.412 163.998 li
@
427.745 172.415 mo
437.745 172.415 li
@
432.745 167.415 mo
432.745 177.415 li
@
444.162 163.998 mo
454.162 163.998 li
@
449.162 158.998 mo
449.162 168.998 li
@
460.495 154.915 mo
470.495 154.915 li
@
465.495 149.915 mo
465.495 159.915 li
@
476.912 152.415 mo
486.912 152.415 li
@
481.912 147.415 mo
481.912 157.415 li
@
493.245 150.248 mo
503.245 150.248 li
@
498.245 145.248 mo
498.245 155.248 li
@
509.578 128.081 mo
519.578 128.081 li
@
514.578 123.081 mo
514.578 133.081 li
@
525.995 103.331 mo
535.995 103.331 li
@
530.995 98.3311 mo
530.995 108.331 li
@
542.328 86.4141 mo
552.328 86.4141 li
@
547.328 81.4141 mo
547.328 91.4141 li
@
69.1612 322.331 mo
76.1612 329.331 li
@
76.1612 322.331 mo
69.1612 329.331 li
@
85.4942 321.248 mo
92.4942 328.248 li
@
92.4942 321.248 mo
85.4942 328.248 li
@
101.911 319.998 mo
108.911 326.998 li
@
108.911 319.998 mo
101.911 326.998 li
@
118.244 314.581 mo
125.244 321.581 li
@
125.244 314.581 mo
118.244 321.581 li
@
134.577 302.414 mo
141.577 309.414 li
@
141.577 302.414 mo
134.577 309.414 li
@
150.994 295.331 mo
157.994 302.331 li
@
157.994 295.331 mo
150.994 302.331 li
@
167.327 288.914 mo
174.327 295.914 li
@
174.327 288.914 mo
167.327 295.914 li
@
183.744 274.581 mo
190.744 281.581 li
@
190.744 274.581 mo
183.744 281.581 li
@
200.077 272.748 mo
207.077 279.748 li
@
207.077 272.748 mo
200.077 279.748 li
@
216.494 273.331 mo
223.494 280.331 li
@
223.494 273.331 mo
216.494 280.331 li
@
232.827 267.164 mo
239.827 274.164 li
@
239.827 267.164 mo
232.827 274.164 li
@
249.16 261.497 mo
256.16 268.497 li
@
256.16 261.497 mo
249.16 268.497 li
@
265.577 241.164 mo
272.577 248.164 li
@
272.577 241.164 mo
265.577 248.164 li
@
281.91 225.664 mo
288.91 232.664 li
@
288.91 225.664 mo
281.91 232.664 li
@
298.327 217.414 mo
305.327 224.414 li
@
305.327 217.414 mo
298.327 224.414 li
@
314.66 209.747 mo
321.66 216.747 li
@
321.66 209.747 mo
314.66 216.747 li
@
331.077 192.83 mo
338.077 199.83 li
@
338.077 192.83 mo
331.077 199.83 li
@
347.41 172.33 mo
354.41 179.33 li
@
354.41 172.33 mo
347.41 179.33 li
@
363.827 163.58 mo
370.827 170.58 li
@
370.833 163.583 mo
363.833 170.583 li
@
380.166 162.166 mo
387.166 169.166 li
@
387.166 162.166 mo
380.166 169.166 li
@
396.499 160.499 mo
403.499 167.499 li
@
403.499 160.499 mo
396.499 167.499 li
@
412.916 155.499 mo
419.916 162.499 li
@
419.916 155.499 mo
412.916 162.499 li
@
429.249 168.916 mo
436.249 175.916 li
@
436.249 168.916 mo
429.249 175.916 li
@
445.666 160.499 mo
452.666 167.499 li
@
452.666 160.499 mo
445.666 167.499 li
@
461.999 151.416 mo
468.999 158.416 li
@
468.999 151.416 mo
461.999 158.416 li
@
478.416 148.916 mo
485.416 155.916 li
@
485.416 148.916 mo
478.416 155.916 li
@
494.749 146.749 mo
501.749 153.749 li
@
501.749 146.749 mo
494.749 153.749 li
@
511.082 124.582 mo
518.082 131.582 li
@
518.082 124.582 mo
511.082 131.582 li
@
527.499 99.832 mo
534.499 106.832 li
@
534.499 99.832 mo
527.499 106.832 li
@
543.832 82.915 mo
550.832 89.915 li
@
550.832 82.915 mo
543.832 89.915 li
@
72.665 324.915 mo
72.665 326.748 li
@
67.915 324.915 mo
77.415 324.915 li
@
67.915 326.748 mo
77.415 326.748 li
@
88.998 322.665 mo
88.998 326.165 li
@
84.248 322.665 mo
93.748 322.665 li
@
84.248 326.165 mo
93.748 326.165 li
@
105.415 320.915 mo
105.415 326.748 li
@
100.665 320.915 mo
110.082 320.915 li
@
100.665 326.748 mo
110.082 326.748 li
@
121.748 311.331 mo
121.748 323.581 li
@
116.998 311.331 mo
126.498 311.331 li
@
116.998 323.581 mo
126.498 323.581 li
@
138.081 301.414 mo
138.081 309.581 li
@
133.331 301.414 mo
142.831 301.414 li
@
133.331 309.581 mo
142.831 309.581 li
@
154.498 290.748 mo
154.498 304.331 li
@
149.748 290.748 mo
159.248 290.748 li
@
149.748 304.331 mo
159.248 304.331 li
@
170.831 284.664 mo
170.831 299.914 li
@
166.081 284.664 mo
175.581 284.664 li
@
166.081 299.914 mo
175.581 299.914 li
@
187.248 268.581 mo
187.248 288.414 li
@
182.498 268.581 mo
191.998 268.581 li
@
182.498 288.414 mo
191.998 288.414 li
@
203.581 269.914 mo
203.581 282.831 li
@
198.831 269.914 mo
208.331 269.914 li
@
198.831 282.831 mo
208.331 282.831 li
@
219.998 270.748 mo
219.998 281.165 li
@
215.248 270.748 mo
224.748 270.748 li
@
215.248 281.165 mo
224.748 281.165 li
@
236.331 263.248 mo
236.331 275.831 li
@
231.581 263.248 mo
241.081 263.248 li
@
231.581 275.831 mo
241.081 275.831 li
@
252.664 253.748 mo
252.664 272.165 li
@
247.997 253.748 mo
257.414 253.748 li
@
247.997 272.165 mo
257.414 272.165 li
@
269.08 240.832 mo
269.08 253.415 li
@
264.33 240.832 mo
273.83 240.832 li
@
264.33 253.415 mo
273.83 253.415 li
@
285.413 222.748 mo
285.413 236.248 li
@
280.663 222.748 mo
290.163 222.748 li
@
280.663 236.248 mo
290.163 236.248 li
@
301.83 215.915 mo
301.83 230.665 li
@
297.08 215.915 mo
306.58 215.915 li
@
297.08 230.665 mo
306.58 230.665 li
@
318.163 202.248 mo
318.163 221.831 li
@
313.413 202.248 mo
322.913 202.248 li
@
313.413 221.831 mo
322.913 221.831 li
@
334.58 185.164 mo
334.58 199.914 li
@
329.83 185.164 mo
339.33 185.164 li
@
329.83 199.914 mo
339.33 199.914 li
@
350.913 165.414 mo
350.913 189.247 li
@
346.163 165.414 mo
355.663 165.414 li
@
346.163 189.247 mo
355.663 189.247 li
@
367.33 162.997 mo
367.33 178.83 li
@
362.58 162.997 mo
371.997 162.997 li
@
362.58 178.83 mo
371.997 178.83 li
@
383.663 143.997 mo
383.663 175.664 li
@
378.913 143.997 mo
388.413 143.997 li
@
378.913 175.664 mo
388.413 175.664 li
@
399.996 151.747 mo
399.996 177.33 li
@
395.246 151.747 mo
404.746 151.747 li
@
395.246 177.33 mo
404.746 177.33 li
@
416.413 145.247 mo
416.413 176.247 li
@
411.663 145.247 mo
421.163 145.247 li
@
411.663 176.247 mo
421.163 176.247 li
@
432.746 149.83 mo
432.746 178.663 li
@
427.996 149.83 mo
437.496 149.83 li
@
427.996 178.663 mo
437.496 178.663 li
@
449.163 149.413 mo
449.163 182.496 li
@
444.413 149.413 mo
453.913 149.413 li
@
444.413 182.496 mo
453.913 182.496 li
@
465.496 134.163 mo
465.496 169.163 li
@
460.746 134.163 mo
470.246 134.163 li
@
460.746 169.163 mo
470.246 169.163 li
@
481.913 136.996 mo
481.913 162.579 li
@
477.163 136.996 mo
486.663 136.996 li
@
477.163 162.579 mo
486.663 162.579 li
@
498.246 141.829 mo
498.246 169.746 li
@
493.496 141.829 mo
502.996 141.829 li
@
493.496 169.746 mo
502.996 169.746 li
@
514.579 112.079 mo
514.579 145.162 li
@
509.912 112.079 mo
519.329 112.079 li
@
509.912 145.162 mo
519.329 145.162 li
@
530.995 85.412 mo
530.995 116.579 li
@
526.245 85.412 mo
535.745 85.412 li
@
526.245 116.579 mo
535.745 116.579 li
@
547.328 68.329 mo
547.328 95.662 li
@
542.578 68.329 mo
552.078 68.329 li
@
542.578 95.662 mo
552.078 95.662 li
@
72.6611 325.829 mo
88.9941 324.412 li
105.411 323.829 li
121.744 317.412 li
138.078 305.496 li
154.494 297.579 li
170.828 292.246 li
187.244 278.496 li
203.578 276.412 li
219.994 275.912 li
236.328 269.496 li
252.661 262.912 li
269.078 247.162 li
285.411 229.496 li
301.828 223.329 li
318.161 211.996 li
334.578 192.496 li
350.911 177.329 li
367.328 170.912 li
383.661 159.829 li
399.994 164.579 li
416.411 160.746 li
432.744 164.246 li
449.161 165.996 li
465.494 151.662 li
481.911 149.829 li
498.244 155.829 li
514.578 128.662 li
530.994 100.996 li
547.328 81.9961 li
@
0 lj
68.75 321.917 mo
76.5833 321.917 li
76.5833 329.75 li
68.75 329.75 li
cp
@
85.083 320.5 mo
92.9163 320.5 li
92.9163 328.333 li
85.083 328.333 li
cp
@
101.5 319.917 mo
109.333 319.917 li
109.333 327.75 li
101.5 327.75 li
cp
@
117.833 313.5 mo
125.666 313.5 li
125.666 321.333 li
117.833 321.333 li
cp
@
134.166 301.583 mo
141.999 301.583 li
141.999 309.416 li
134.166 309.416 li
cp
@
150.583 293.666 mo
158.416 293.666 li
158.416 301.499 li
150.583 301.499 li
cp
@
166.916 288.333 mo
174.749 288.333 li
174.749 296.166 li
166.916 296.166 li
cp
@
183.333 274.583 mo
191.166 274.583 li
191.166 282.416 li
183.333 282.416 li
cp
@
199.666 272.5 mo
207.499 272.5 li
207.499 280.333 li
199.666 280.333 li
cp
@
216.083 272 mo
223.916 272 li
223.916 279.833 li
216.083 279.833 li
cp
@
232.416 265.583 mo
240.249 265.583 li
240.249 273.416 li
232.416 273.416 li
cp
@
248.749 259 mo
256.582 259 li
256.582 266.833 li
248.749 266.833 li
cp
@
265.166 243.25 mo
272.999 243.25 li
272.999 251.083 li
265.166 251.083 li
cp
@
281.499 225.583 mo
289.332 225.583 li
289.332 233.416 li
281.499 233.416 li
cp
@
297.916 219.416 mo
305.749 219.416 li
305.749 227.249 li
297.916 227.249 li
cp
@
314.249 208.083 mo
322.082 208.083 li
322.082 215.916 li
314.249 215.916 li
cp
@
330.666 188.583 mo
338.499 188.583 li
338.499 196.416 li
330.666 196.416 li
cp
@
346.999 173.416 mo
354.832 173.416 li
354.832 181.249 li
346.999 181.249 li
cp
@
363.416 166.999 mo
371.249 166.999 li
371.249 174.832 li
363.416 174.832 li
cp
@
379.749 155.916 mo
387.582 155.916 li
387.582 163.749 li
379.749 163.749 li
cp
@
396.082 160.666 mo
403.915 160.666 li
403.915 168.499 li
396.082 168.499 li
cp
@
412.499 156.833 mo
420.332 156.833 li
420.332 164.666 li
412.499 164.666 li
cp
@
428.832 160.333 mo
436.665 160.333 li
436.665 168.166 li
428.832 168.166 li
cp
@
445.249 162.083 mo
453.082 162.083 li
453.082 169.916 li
445.249 169.916 li
cp
@
461.582 147.75 mo
469.415 147.75 li
469.415 155.583 li
461.582 155.583 li
cp
@
477.999 145.917 mo
485.832 145.917 li
485.832 153.75 li
477.999 153.75 li
cp
@
494.332 151.917 mo
502.165 151.917 li
502.165 159.75 li
494.332 159.75 li
cp
@
510.665 124.75 mo
518.498 124.75 li
518.498 132.583 li
510.665 132.583 li
cp
@
527.082 97.083 mo
534.915 97.083 li
534.915 104.916 li
527.082 104.916 li
cp
@
543.415 78.083 mo
551.248 78.083 li
551.248 85.9164 li
543.415 85.9164 li
cp
@
1 lj
72.667 324.917 mo
72.667 326.75 li
@
67.917 324.917 mo
77.417 324.917 li
@
67.917 326.75 mo
77.417 326.75 li
@
89 322.583 mo
89 326.083 li
@
84.25 322.583 mo
93.75 322.583 li
@
84.25 326.083 mo
93.75 326.083 li
@
105.417 320.916 mo
105.417 327.166 li
@
100.667 320.916 mo
110.084 320.916 li
@
100.667 327.166 mo
110.084 327.166 li
@
121.75 309.749 mo
121.75 322.249 li
@
117 309.749 mo
126.5 309.749 li
@
117 322.249 mo
126.5 322.249 li
@
138.083 301.082 mo
138.083 309.165 li
@
133.333 301.082 mo
142.833 301.082 li
@
133.333 309.165 mo
142.833 309.165 li
@
154.5 290.832 mo
154.5 304.332 li
@
149.75 290.832 mo
159.25 290.832 li
@
149.75 304.332 mo
159.25 304.332 li
@
170.833 286.665 mo
170.833 302.082 li
@
166.083 286.665 mo
175.583 286.665 li
@
166.083 302.082 mo
175.583 302.082 li
@
187.25 272.165 mo
187.25 287.748 li
@
182.5 272.165 mo
192 272.165 li
@
182.5 287.748 mo
192 287.748 li
@
203.583 270.498 mo
203.583 282.915 li
@
198.833 270.498 mo
208.333 270.498 li
@
198.833 282.915 mo
208.333 282.915 li
@
220 270.748 mo
220 279.831 li
@
215.25 270.748 mo
224.75 270.748 li
@
215.25 279.831 mo
224.75 279.831 li
@
236.333 261.664 mo
236.333 275.497 li
@
231.583 261.664 mo
241.083 261.664 li
@
231.583 275.497 mo
241.083 275.497 li
@
252.666 255.497 mo
252.666 267.83 li
@
247.999 255.497 mo
257.416 255.497 li
@
247.999 267.83 mo
257.416 267.83 li
@
269.082 237.997 mo
269.082 253.83 li
@
264.332 237.997 mo
273.832 237.997 li
@
264.332 253.83 mo
273.832 253.83 li
@
285.415 219.247 mo
285.415 238.83 li
@
280.665 219.247 mo
290.165 219.247 li
@
280.665 238.83 mo
290.165 238.83 li
@
301.832 211.413 mo
301.832 236.08 li
@
297.082 211.413 mo
306.582 211.413 li
@
297.082 236.08 mo
306.582 236.08 li
@
318.165 202.997 mo
318.165 215.747 li
@
313.415 202.997 mo
322.915 202.997 li
@
313.415 215.747 mo
322.915 215.747 li
@
334.582 183.83 mo
334.582 197.663 li
@
329.832 183.83 mo
339.332 183.83 li
@
329.832 197.663 mo
339.332 197.663 li
@
350.915 165.746 mo
350.915 187.246 li
@
346.165 165.746 mo
355.665 165.746 li
@
346.165 187.246 mo
355.665 187.246 li
@
367.332 153.413 mo
367.332 185.08 li
@
362.582 153.413 mo
371.999 153.413 li
@
362.582 185.08 mo
371.999 185.08 li
@
383.665 149.497 mo
383.665 179.747 li
@
378.915 149.497 mo
388.415 149.497 li
@
378.915 179.747 mo
388.415 179.747 li
@
399.998 142.08 mo
399.998 179.913 li
@
395.248 142.08 mo
404.748 142.08 li
@
395.248 179.913 mo
404.748 179.913 li
@
416.415 141.413 mo
416.415 161.746 li
@
411.665 141.413 mo
421.165 141.413 li
@
411.665 161.746 mo
421.165 161.746 li
@
432.748 142.913 mo
432.748 171.246 li
@
427.998 142.913 mo
437.498 142.913 li
@
427.998 171.246 mo
437.498 171.246 li
@
449.165 135.829 mo
449.165 181.496 li
@
444.415 135.829 mo
453.915 135.829 li
@
444.415 181.496 mo
453.915 181.496 li
@
465.498 128.079 mo
465.498 170.996 li
@
460.748 128.079 mo
470.248 128.079 li
@
460.748 170.996 mo
470.248 170.996 li
@
481.915 132.996 mo
481.915 164.829 li
@
477.165 132.996 mo
486.665 132.996 li
@
477.165 164.829 mo
486.665 164.829 li
@
498.248 128.162 mo
498.248 160.912 li
@
493.498 128.162 mo
502.998 128.162 li
@
493.498 160.912 mo
502.998 160.912 li
@
514.581 100.912 mo
514.581 132.829 li
@
509.914 100.912 mo
519.331 100.912 li
@
509.914 132.829 mo
519.331 132.829 li
@
530.997 88.746 mo
530.997 115.329 li
@
526.247 88.746 mo
535.747 88.746 li
@
526.247 115.329 mo
535.747 115.329 li
@
547.33 71.912 mo
547.33 106.162 li
@
542.58 71.912 mo
552.08 71.912 li
@
542.58 106.162 mo
552.08 106.162 li
@
72.6631 325.829 mo
88.9961 324.329 li
105.413 323.996 li
121.746 315.996 li
138.08 305.162 li
154.496 297.579 li
170.83 294.412 li
187.246 279.996 li
203.58 276.662 li
219.996 275.246 li
236.33 268.579 li
252.663 261.662 li
269.08 245.912 li
285.413 228.996 li
301.83 223.746 li
318.163 209.412 li
334.58 190.746 li
350.913 176.496 li
367.33 169.246 li
383.663 164.579 li
399.996 160.996 li
416.413 151.579 li
432.746 157.079 li
449.163 158.662 li
465.496 149.496 li
481.913 148.912 li
498.246 144.579 li
514.58 116.829 li
530.996 101.996 li
547.33 89.0791 li
@
0 lj
72.667 332.417 mo
77.667 325.834 li
72.667 319.25 li
67.667 325.834 li
72.667 332.417 li
cp
@
89 330.917 mo
94 324.334 li
89 317.75 li
84 324.334 li
89 330.917 li
cp
@
105.417 330.584 mo
110.417 324.001 li
105.417 317.417 li
100.417 324.001 li
105.417 330.584 li
cp
@
121.75 322.584 mo
126.75 316.001 li
121.75 309.417 li
116.75 316.001 li
121.75 322.584 li
cp
@
138.083 311.751 mo
143.083 305.168 li
138.083 298.584 li
133.083 305.168 li
138.083 311.751 li
cp
@
154.5 304.168 mo
159.5 297.585 li
154.5 291.001 li
149.5 297.585 li
154.5 304.168 li
cp
@
170.833 301.001 mo
175.833 294.418 li
170.833 287.834 li
165.833 294.418 li
170.833 301.001 li
cp
@
187.25 286.584 mo
192.25 280.001 li
187.25 273.417 li
182.25 280.001 li
187.25 286.584 li
cp
@
203.583 283.251 mo
208.583 276.668 li
203.583 270.084 li
198.583 276.668 li
203.583 283.251 li
cp
@
220 281.834 mo
225 275.251 li
220 268.667 li
215 275.251 li
220 281.834 li
cp
@
236.333 275.167 mo
241.333 268.584 li
236.333 262 li
231.333 268.584 li
236.333 275.167 li
cp
@
252.666 268.25 mo
257.666 261.667 li
252.666 255.083 li
247.666 261.667 li
252.666 268.25 li
cp
@
269.083 252.5 mo
274.083 245.917 li
269.083 239.333 li
264.083 245.917 li
269.083 252.5 li
cp
@
285.416 235.583 mo
290.416 229 li
285.416 222.416 li
280.416 229 li
285.416 235.583 li
cp
@
301.833 230.333 mo
306.833 223.75 li
301.833 217.166 li
296.833 223.75 li
301.833 230.333 li
cp
@
318.166 216 mo
323.166 209.417 li
318.166 202.833 li
313.166 209.417 li
318.166 216 li
cp
@
334.583 197.333 mo
339.583 190.75 li
334.583 184.166 li
329.583 190.75 li
334.583 197.333 li
cp
@
350.916 183.083 mo
355.916 176.5 li
350.916 169.916 li
345.916 176.5 li
350.916 183.083 li
cp
@
367.333 175.833 mo
372.333 169.25 li
367.333 162.666 li
362.333 169.25 li
367.333 175.833 li
cp
@
383.666 171.166 mo
388.666 164.583 li
383.666 157.999 li
378.666 164.583 li
383.666 171.166 li
cp
@
399.999 167.583 mo
404.999 161 li
399.999 154.416 li
394.999 161 li
399.999 167.583 li
cp
@
416.416 158.166 mo
421.416 151.583 li
416.416 144.999 li
411.416 151.583 li
416.416 158.166 li
cp
@
432.749 163.666 mo
437.749 157.083 li
432.749 150.499 li
427.749 157.083 li
432.749 163.666 li
cp
@
449.166 165.249 mo
454.166 158.666 li
449.166 152.082 li
444.166 158.666 li
449.166 165.249 li
cp
@
465.499 156.082 mo
470.499 149.499 li
465.499 142.915 li
460.499 149.499 li
465.499 156.082 li
cp
@
481.916 155.499 mo
486.916 148.916 li
481.916 142.332 li
476.916 148.916 li
481.916 155.499 li
cp
@
498.249 151.166 mo
503.249 144.583 li
498.249 137.999 li
493.249 144.583 li
498.249 151.166 li
cp
@
514.582 123.416 mo
519.582 116.833 li
514.582 110.249 li
509.582 116.833 li
514.582 123.416 li
cp
@
530.999 108.583 mo
535.999 102 li
530.999 95.416 li
525.999 102 li
530.999 108.583 li
cp
@
547.332 95.666 mo
552.332 89.083 li
547.332 82.499 li
542.332 89.083 li
547.332 95.666 li
cp
@
1 lj
72.667 324.917 mo
72.667 326.75 li
@
67.917 324.917 mo
77.417 324.917 li
@
67.917 326.75 mo
77.417 326.75 li
@
89 322.667 mo
89 325.75 li
@
84.25 322.667 mo
93.75 322.667 li
@
84.25 325.75 mo
93.75 325.75 li
@
105.417 320.083 mo
105.417 327.166 li
@
100.667 320.083 mo
110.084 320.083 li
@
100.667 327.166 mo
110.084 327.166 li
@
121.75 309.249 mo
121.75 321.916 li
@
117 309.249 mo
126.5 309.249 li
@
117 321.916 mo
126.5 321.916 li
@
138.083 300.999 mo
138.083 310.832 li
@
133.333 300.999 mo
142.833 300.999 li
@
133.333 310.832 mo
142.833 310.832 li
@
154.5 291.332 mo
154.5 305.582 li
@
149.75 291.332 mo
159.25 291.332 li
@
149.75 305.582 mo
159.25 305.582 li
@
170.833 283.999 mo
170.833 299.249 li
@
166.083 283.999 mo
175.583 283.999 li
@
166.083 299.249 mo
175.583 299.249 li
@
187.25 270.499 mo
187.25 287.082 li
@
182.5 270.499 mo
192 270.499 li
@
182.5 287.082 mo
192 287.082 li
@
203.583 273.082 mo
203.583 282.415 li
@
198.833 273.082 mo
208.333 273.082 li
@
198.833 282.415 mo
208.333 282.415 li
@
220 269.832 mo
220 281.332 li
@
215.25 269.832 mo
224.75 269.832 li
@
215.25 281.332 mo
224.75 281.332 li
@
236.333 260.915 mo
236.333 275.332 li
@
231.583 260.915 mo
241.083 260.915 li
@
231.583 275.332 mo
241.083 275.332 li
@
252.666 250.582 mo
252.666 265.749 li
@
247.999 250.582 mo
257.416 250.582 li
@
247.999 265.749 mo
257.416 265.749 li
@
269.082 238.082 mo
269.082 251.499 li
@
264.332 238.082 mo
273.832 238.082 li
@
264.332 251.499 mo
273.832 251.499 li
@
285.415 220.749 mo
285.415 230.082 li
@
280.665 220.749 mo
290.165 220.749 li
@
280.665 230.082 mo
290.165 230.082 li
@
301.832 213.582 mo
301.832 226.415 li
@
297.082 213.582 mo
306.582 213.582 li
@
297.082 226.415 mo
306.582 226.415 li
@
318.165 201.915 mo
318.165 215.165 li
@
313.415 201.915 mo
322.915 201.915 li
@
313.415 215.165 mo
322.915 215.165 li
@
334.582 182.998 mo
334.582 206.581 li
@
329.832 182.998 mo
339.332 182.998 li
@
329.832 206.581 mo
339.332 206.581 li
@
350.915 170.748 mo
350.915 186.081 li
@
346.165 170.748 mo
355.665 170.748 li
@
346.165 186.081 mo
355.665 186.081 li
@
367.332 156.414 mo
367.332 176.331 li
@
362.582 156.414 mo
371.999 156.414 li
@
362.582 176.331 mo
371.999 176.331 li
@
383.665 146.664 mo
383.665 172.081 li
@
378.915 146.664 mo
388.415 146.664 li
@
378.915 172.081 mo
388.415 172.081 li
@
399.998 141.664 mo
399.998 185.997 li
@
395.248 141.664 mo
404.748 141.664 li
@
395.248 185.997 mo
404.748 185.997 li
@
416.415 139.747 mo
416.415 176.83 li
@
411.665 139.747 mo
421.165 139.747 li
@
411.665 176.83 mo
421.165 176.83 li
@
432.748 142.58 mo
432.748 173.413 li
@
427.998 142.58 mo
437.498 142.58 li
@
427.998 173.413 mo
437.498 173.413 li
@
449.165 139.163 mo
449.165 175.58 li
@
444.415 139.163 mo
453.915 139.163 li
@
444.415 175.58 mo
453.915 175.58 li
@
465.498 139.163 mo
465.498 173.746 li
@
460.748 139.163 mo
470.248 139.163 li
@
460.748 173.746 mo
470.248 173.746 li
@
481.915 125.413 mo
481.915 159.413 li
@
477.165 125.413 mo
486.665 125.413 li
@
477.165 159.413 mo
486.665 159.413 li
@
498.248 102.163 mo
498.248 141.08 li
@
493.498 102.163 mo
502.998 102.163 li
@
493.498 141.08 mo
502.998 141.08 li
@
514.581 95.83 mo
514.581 118.83 li
@
509.914 95.83 mo
519.331 95.83 li
@
509.914 118.83 mo
519.331 118.83 li
@
530.997 93.08 mo
530.997 109.413 li
@
526.247 93.08 mo
535.747 93.08 li
@
526.247 109.413 mo
535.747 109.413 li
@
547.33 87.1631 mo
547.33 113.913 li
@
542.58 87.1631 mo
552.08 87.1631 li
@
542.58 113.913 mo
552.08 113.913 li
@
72.6631 325.83 mo
88.9961 324.247 li
105.413 323.58 li
121.746 315.58 li
138.08 305.913 li
154.496 298.497 li
170.83 291.663 li
187.246 278.747 li
203.58 277.747 li
219.996 275.58 li
236.33 268.08 li
252.663 258.163 li
269.08 244.83 li
285.413 225.413 li
301.83 219.997 li
318.163 208.58 li
334.58 194.747 li
350.913 178.413 li
367.33 166.33 li
383.663 159.413 li
399.996 163.83 li
416.413 158.33 li
432.746 157.997 li
449.163 157.33 li
465.496 156.497 li
481.913 142.413 li
498.246 121.663 li
514.58 107.33 li
530.996 101.247 li
547.33 100.58 li
@
0 lj
72.667 332.417 mo
78.417 322.5 li
66.917 322.5 li
72.667 332.417 li
cp
@
89 330.834 mo
94.75 320.917 li
83.25 320.917 li
89 330.834 li
cp
@
105.417 330.167 mo
111.167 320.25 li
99.667 320.25 li
105.417 330.167 li
cp
@
121.75 322.167 mo
127.5 312.25 li
116 312.25 li
121.75 322.167 li
cp
@
138.083 312.5 mo
143.833 302.583 li
132.333 302.583 li
138.083 312.5 li
cp
@
154.5 305.083 mo
160.25 295.166 li
148.75 295.166 li
154.5 305.083 li
cp
@
170.833 298.25 mo
176.583 288.333 li
165.083 288.333 li
170.833 298.25 li
cp
@
187.25 285.333 mo
193 275.416 li
181.5 275.416 li
187.25 285.333 li
cp
@
203.583 284.333 mo
209.333 274.416 li
197.833 274.416 li
203.583 284.333 li
cp
@
220 282.166 mo
225.75 272.249 li
214.25 272.249 li
220 282.166 li
cp
@
236.333 274.666 mo
242.083 264.749 li
230.583 264.749 li
236.333 274.666 li
cp
@
252.666 264.749 mo
258.416 254.832 li
246.916 254.832 li
252.666 264.749 li
cp
@
269.083 251.416 mo
274.833 241.499 li
263.333 241.499 li
269.083 251.416 li
cp
@
285.416 231.999 mo
291.166 222.082 li
279.666 222.082 li
285.416 231.999 li
cp
@
301.833 226.582 mo
307.583 216.665 li
296.083 216.665 li
301.833 226.582 li
cp
@
318.166 215.165 mo
323.916 205.248 li
312.416 205.248 li
318.166 215.165 li
cp
@
334.583 201.332 mo
340.333 191.415 li
328.833 191.415 li
334.583 201.332 li
cp
@
350.916 184.999 mo
356.666 175.082 li
345.166 175.082 li
350.916 184.999 li
cp
@
367.333 172.916 mo
373.083 162.999 li
361.583 162.999 li
367.333 172.916 li
cp
@
383.666 165.999 mo
389.416 156.082 li
377.916 156.082 li
383.666 165.999 li
cp
@
399.999 170.416 mo
405.749 160.499 li
394.249 160.499 li
399.999 170.416 li
cp
@
416.416 164.916 mo
422.166 154.999 li
410.666 154.999 li
416.416 164.916 li
cp
@
432.749 164.583 mo
438.499 154.666 li
426.999 154.666 li
432.749 164.583 li
cp
@
449.166 163.916 mo
454.916 153.999 li
443.416 153.999 li
449.166 163.916 li
cp
@
465.499 163.083 mo
471.249 153.166 li
459.749 153.166 li
465.499 163.083 li
cp
@
481.916 149 mo
487.666 139.083 li
476.166 139.083 li
481.916 149 li
cp
@
498.249 128.25 mo
503.999 118.333 li
492.499 118.333 li
498.249 128.25 li
cp
@
514.582 113.917 mo
520.332 104 li
508.832 104 li
514.582 113.917 li
cp
@
530.999 107.834 mo
536.749 97.917 li
525.249 97.917 li
530.999 107.834 li
cp
@
547.332 107.167 mo
553.082 97.25 li
541.582 97.25 li
547.332 107.167 li
cp
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 1244 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>LWYAAA+Helvetica AddT42Char 
1 2196 35 <000200e1ffd5073b05e5000b004a00ca4059363634484621554868096727
6a3e6742783dc819c6450b192b1939283d3803380e3721060839150a2742
460b47115800550358216616c80dc80ed714d715d7410e0b0a190a260a56
0a04fe0a010a2d2e2f2c200a0302083508b80190b31a234a02b80190b22d
293bb80190b51303474a4643b8019040114a090a052d2e1d2e3832053526
32260f38bd018f0017003f018f000f0732852feddded1239392fed2f1239
dd2edd1239003ffdd412393fedd4c4ed10d43cfdc411121739870510c001
5d7131305d005d5d00262322021514163332123500032611103736212017
16111400232226353436370e01232226353400333216173733030e011514
163332363534002120070611141716213224371706042304e1534972a756
418797fd97e2b5dcf4019b0164ccbffeefa9635e040335a2567b99010596
6685043293850f0e372372b5febcfeeefe84c9aca4c00163a6011e77425a
fe9ad703bb63fef3856267013b7ffc580105d101120146e4feb4aafef1e4
febd5f430b180d735fb28cc701307653a8fe4a333e182d29eec0e80109de
bdfee2faaac969595a508c00>LWYAAA+Helvetica AddT42Char 
1 3564 49 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>LWYAAA+Helvetica AddT42Char 
1 3736 53 <000200b40000057805bd0009002700944012070d49014805590158056905
641478050816bb01300119001b011c40422321202660127112751403121e
1f141c1503211e161404261224251e0009091b071e0b02261c1b08202515
1f251603310f691b1a29082625270a192829d6219566182b2b4ef43c4dfd
3c4e10f64df4edd4edd4ed003f3c3c3ffd12392f3cfd3c39111739011112
39391239395d1112392b3130015d01323635342726232111032132171615
1406071e011f011617161715232e012f012627262321112303478ca3723d
66fe1ac702a8a86dcf6d6256570507030b122ef40a0c040c0764397afe3b
c7031c70929d391efe0a02a1315efd84a833237280c55429461421133c56
f590311bfd8a>LWYAAA+Helvetica AddT42Char 
1 4012 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>LWYAAA+Helvetica AddT42Char 
1 4416 69 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>LWYAAA+Helvetica AddT42Char 
1 4628 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>LWYAAA+Helvetica AddT42Char 
1 4888 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>LWYAAA+Helvetica AddT42Char 
1 5292 73 <0001001c0000021705d20017004d402b071d060a1d03010f1439160d0612
0a1917171a0e0d1129171207120f0e1f0e020efc14191819fc21677e182b
2b4ef44dfd5d39c42f3cfd3c104e456544e6003f3f3c4dfd3c3fedd4ed31
3012373633321617152e012322061533152311231123353335b5233fb411
24171c190b5220b2b4b295950542345c0202a4020155ae8efc64039c8ea8
0000>LWYAAA+Helvetica AddT42Char 
1 5444 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>LWYAAA+Helvetica AddT42Char 
1 5536 79 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>LWYAAA+Helvetica AddT42Char 
1 5604 80 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>LWYAAA+Helvetica AddT42Char 
1 5852 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>LWYAAA+Helvetica AddT42Char 
1 6036 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>LWYAAA+Helvetica AddT42Char 
1 6276 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>LWYAAA+Helvetica AddT42Char 
1 6416 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>LWYAAA+Helvetica AddT42Char 
1 6864 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>LWYAAA+Helvetica AddT42Char 
1 7024 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/five 24 def
/at 35 def
/N 49 def
/R 53 def
/a 68 def
/b 69 def
/c 70 def
/e 72 def
/f 73 def
/i 76 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
end
LWYAAA+Helvetica /Encoding get
dup 53 /five put
dup 64 /at put
dup 78 /N put
dup 82 /R put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 7{/.notdef}rp /at 13{/.notdef}rp /N 3{/.notdef}rp /R 14{/.notdef}rp /a /b /c /.notdef /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf238 374.167 mo(Number of iterations)[11.552 8.896 13.3279 8.896 8.896 5.32788 4.448 8.896 4.448 4.448 3.552 4.448 8.896 5.32788 8.896 4.448 3.552 8.896 8.896 0 ]xshERMWEC+Helvetica*1 [0 -16 -16 0 0 0 ]msf17.4167 218.5 mo(Recall@500)[-11.552 -8.896 -8 -8.896 -3.552 -3.552 -16.24 -8.896 -8.896 0 ]yshERMWEC+Helvetica*1 [10 0 0 -10 0 0 ]msf58.1667 343.75 mo( )sh559.167 12.833 mo( )sh64.583 158.333 mo
169.5 158.333 li
169.5 14.333 li
64.583 14.333 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
1 lj
64.583 158.333 mo
64.583 14.333 li
169.5 14.333 li
169.5 158.333 li
64.583 158.333 li
@
64.583 14.333 mo
169.5 14.333 li
1 /0 /CSD get_res sepcs
1 sep
@
64.583 158.333 mo
169.5 158.333 li
169.5 14.333 li
@
64.583 158.333 mo
64.583 14.333 li
@
64.583 158.333 mo
169.5 158.333 li
@
64.583 158.333 mo
64.583 14.333 li
169.5 14.333 li
@
64.583 158.333 mo
169.5 158.333 li
169.5 14.333 li
@
64.583 158.333 mo
64.583 14.333 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 2628 36 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>LWYAAA+Helvetica AddT42Char 
1 2908 37 <000300970000050405bd000a00150028008240385a0d5a116a026a0d6a11
7a02772107490d4811021d081f0f041f131e000027081e17020b1e270804
311b690f31231a2a091525281619292ab8015fb3217666182b2b4ef43c4d
fd3c4e10f64dedf4ed003ffd3fed12392ffd390111123931304379401218
1a0508192506260718042b01051a082b01002b012b2b2b8181015d5d0132
373635342726232111013237363534272623211103212017161514070607
16171615140706290102c47e466e754282fe9d01adb74e318f4c7dfe75c3
027701026d404f294d7138635985fedefd93035023378f90321cfe39fd5a
6a435fa03a1ffdfb05139a5b778b592f272b3660a98e73ac>LWYAAA+Helvetica AddT42Char 
1 3172 43 <000100a10000052f05bd000b003f402108091e0302020401020a07080407
2506051a0d010a250b00190c0c0da0217670182b2b104ef43c4dfd3c4e10
f63c4dfd3c003f3c3f3c392f3cfd3c3130133311211133112311211123a1
c902fcc9c9fd04c905bdfda1025ffa4302affd510000>LWYAAA+Helvetica AddT42Char 
1 3284 48 <000100970000061705bd001300cb405944014b03020601090316011903d7
010513011c03140b1b0c57015803d401db03d40bdb0c0a040a040d450286
02045102970202290a280d380a380d4702570276020725640d0a02031203
01020b0c120306081517171a040405b8019b400d0a1f030b06fd0c0102fd
0d1f12b8019bb6130019147670182b4e10f43c4dfde419f43939f4393918
e4fd3c4e10456544e6003f173c3f3c1217394b5279b10d0cb801aab40201
020a0bb801aab202020387054d2e7afd047dc487052e7afd047dc4313000
5d727101725d71132109012111231134363501230115141615112397011d
01a601a3011abd04fe5dc5fe5a05be05bdfb2604dafa4303632dd077fb29
04d72d36dd34fc9d0000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/A 36 def
/B 37 def
/H 43 def
/M 48 def
end
LWYAAA+Helvetica /Encoding get
dup 65 /A put
dup 66 /B put
dup 72 /H put
dup 77 /M put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ERMWEC+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 7{/.notdef}rp /at /A /B 5{/.notdef}rp /H 4{/.notdef}rp /M /N 3{/.notdef}rp /R 14{/.notdef}rp /a /b /c /.notdef /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]ERMWEC+Helvetica nfERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf103.25 35.5833 mo(BMAH)[10.6721 13.3279 10.6721 0 ]xshERMWEC+Helvetica*1 [12 0 0 -12 0 0 ]msf149.417 27.5833 mo(1)sh2 lw
70.5 27.75 mo
100.167 27.75 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf103.25 59 mo(BMAH)[10.6721 13.3279 10.6721 0 ]xshERMWEC+Helvetica*1 [12 0 0 -12 0 0 ]msf149.417 51 mo(0.8)[6.672 3.336 0 ]xsh70.5 51.167 mo
100.167 51.167 li
@
.5 lw
90.32 51.18 mo
90.32 53.94 88.08 56.18 85.32 56.18 cv
82.56 56.18 80.32 53.94 80.32 51.18 cv
80.32 48.42 82.56 46.18 85.32 46.18 cv
88.08 46.18 90.32 48.42 90.32 51.18 cv
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf103.25 82.5 mo(BMAH)[10.6721 13.3279 10.6721 0 ]xshERMWEC+Helvetica*1 [12 0 0 -12 0 0 ]msf149.417 74.5 mo(0.6)[6.672 3.336 0 ]xsh2 lw
70.5 74.583 mo
100.167 74.583 li
@
.5 lw
80.333 74.583 mo
90.333 74.583 li
@
85.333 69.583 mo
85.333 79.583 li
@
81.833 71.083 mo
88.833 78.083 li
@
88.833 71.083 mo
81.833 78.083 li
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf103.25 105.917 mo(BMAH)[10.6721 13.3279 10.6721 0 ]xshERMWEC+Helvetica*1 [12 0 0 -12 0 0 ]msf149.417 97.9167 mo(0.4)[6.672 3.336 0 ]xsh2 lw
70.5 98 mo
100.167 98 li
@
.5 lw
0 lj
81.417 94.083 mo
89.2503 94.083 li
89.2503 101.916 li
81.417 101.916 li
cp
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf103.25 129.417 mo(BMAH)[10.6721 13.3279 10.6721 0 ]xshERMWEC+Helvetica*1 [12 0 0 -12 0 0 ]msf149.417 121.417 mo(0.2)[6.672 3.336 0 ]xsh2 lw
1 lj
70.5 121.417 mo
100.167 121.417 li
@
.5 lw
0 lj
85.333 128 mo
90.333 121.417 li
85.333 114.833 li
80.333 121.417 li
85.333 128 li
cp
@
ERMWEC+Helvetica*1 [16 0 0 -16 0 0 ]msf103.25 152.833 mo(BMAH)[10.6721 13.3279 10.6721 0 ]xshERMWEC+Helvetica*1 [12 0 0 -12 0 0 ]msf149.417 144.833 mo(0)sh2 lw
1 lj
70.5 144.833 mo
100.167 144.833 li
@
.5 lw
0 lj
85.333 151.417 mo
91.083 141.5 li
79.583 141.5 li
85.333 151.417 li
cp
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/ERMWEC+Helvetica*1 uf/ERMWEC+Helvetica uf/LWYAAA+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
